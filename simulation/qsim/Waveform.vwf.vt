// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/01/2018 16:27:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          2_bit_comparator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2_bit_comparator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_0;
reg A_1;
reg B_0;
reg B_1;
reg EQ_iplus1;
reg G_iplus1;
// wires                                               
wire EQ_i;
wire GT_i;

// assign statements (if any)                          
2_bit_comparator i1 (
// port map - connection between master ports and signals/registers   
	.A_0(A_0),
	.A_1(A_1),
	.B_0(B_0),
	.B_1(B_1),
	.EQ_i(EQ_i),
	.EQ_iplus1(EQ_iplus1),
	.G_iplus1(G_iplus1),
	.GT_i(GT_i)
);
initial 
begin 
#1000000 $finish;
end 

// EQ_iplus1
initial
begin
	EQ_iplus1 = 1'b0;
	EQ_iplus1 = #400000 1'b1;
	EQ_iplus1 = #400000 1'b0;
end 

// G_iplus1
initial
begin
	repeat(2)
	begin
		G_iplus1 = 1'b0;
		G_iplus1 = #200000 1'b1;
		# 200000;
	end
	G_iplus1 = 1'b0;
end 

// A_1
always
begin
	A_1 = 1'b0;
	A_1 = #100000 1'b1;
	#100000;
end 

// A_0
always
begin
	A_0 = 1'b0;
	A_0 = #50000 1'b1;
	#50000;
end 

// B_1
always
begin
	B_1 = 1'b0;
	B_1 = #25000 1'b1;
	#25000;
end 

// B_0
always
begin
	B_0 = 1'b0;
	B_0 = #12500 1'b1;
	#12500;
end 
endmodule

